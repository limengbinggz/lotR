% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lcm_tree.R
\name{lcm_tree}
\alias{lcm_tree}
\title{wrapper function for fitting and summaries}
\usage{
lcm_tree(
  Y,
  leaf_ids,
  mytree,
  rootnode = "Node1",
  weighted_edge = TRUE,
  Z_obs = NULL,
  ci_level = 0.95,
  get_lcm_by_group = TRUE,
  update_hyper_freq = 50,
  print_freq = 10,
  quiet = TRUE,
  plot_fig = FALSE,
  shared_tau = FALSE,
  hyper_fixed = list(K = 3),
  tol = 1e-08,
  tol_hyper = 1e-04,
  max_iter = 5000,
  nrestarts = 3,
  keep_restarts = TRUE,
  parallel = TRUE,
  log_restarts = FALSE,
  log_dir = ".",
  vi_params_init = list(),
  hyperparams_init = list(),
  random_init = FALSE,
  random_init_vals = list(tau_lims = c(0.5, 1.5), psi_sd_frac = 0.2, phi_sd_frac = 0.2,
    mu_gamma_sd_frac = 0.2, mu_alpha_sd_frac = 0.2, u_sd_frac = 0.2),
  allow_continue = FALSE
)
}
\arguments{
\item{Y}{An \code{n} x \code{J} matrix of binary (0 or 1) measurements,
where each of n observation may belong to a leaf node; we hope to group n subjects into
groups possibly coarser than the leaf-induced groups, and in each group, we have a homogeneous latent
class model}

\item{leaf_ids}{Character vector of length \code{n}. \code{leaf_ids[i]} is a string indicating the
leaf_ids experienced by unit \code{i}.}

\item{mytree}{A directed \code{igraph} object. This is a tree representing the relationships
among the leaf_ids. The leaves represent individual leaf_ids, and internal nodes
represent leaf_ids categories consisting of their leaf descendants. All nodes
of mytree must have unique names as given by \code{names(V(mytree))}. The names of the leaves must
be equal to the unique elements of leaf_ids. The vertices of \code{mytree}, \code{V(mytree)}, may have
an attribute \code{levels} containing integer values from 1 to \code{max(V(mytree)$levels)}.
In this case, the levels attribute specifies groups of nodes that share common
hyperparameters \code{rho[f]}, \code{tau_1[f]}, and \code{tau_2[f]}. If \code{V(mytree)$levels} is \code{NULL},
the default is two levels of hyperparameters: one for all leaf nodes, and one
for all internal nodes. NB: this needs to be checked in the \code{\link{design_tree}}}

\item{rootnode}{a character string indicating the root node}

\item{weighted_edge}{default to \code{TRUE}, which indicates the model will
use the values of branch lengths (\code{h_pau} of \code{V(mytree)}).}

\item{Z_obs}{a matrix of two columns, first column is subject ids (of all samples),
the second column is a mix of NA or integers: NA for unknown and integers for known
classes.}

\item{ci_level}{A number between 0 and 1 giving the desired credible interval.
For example, \code{ci_level = 0.95} (the default) returns a 95\% credible interval}

\item{get_lcm_by_group}{If \code{TRUE}, lotR will also return the maximum likelihood estimates of the
coefficients for each leaf_ids group discovered by the model.
Default is \code{TRUE}.}

\item{update_hyper_freq}{How frequently to update hyperparameters.
Default = every 50 iterations.}

\item{print_freq}{How often to print out iteration number and current value of epsilon
(the difference in objective function value for the two most recent iterations).}

\item{quiet}{default to FALSE, which prints empirical class probabilities and updates on
tau's}

\item{plot_fig}{plot figure about prob and response profile (1st node)}

\item{shared_tau}{logical: \code{TRUE} for sharing the tau_1 for alpha's in
the same node; same for tau_2 (gamma's). Default is \code{FALSE}}

\item{hyper_fixed}{Fixed values of hyperprior parameters for rho.
This should be a list with two elements:
a and b, both numeric vectors of length \code{L}, representing the
parameters of the beta prior on rho for each level, where \code{L} is the
number of levels.
Default is \code{list(a = rep(1, L), b = rep(1, L), tau_update_levels = c(1,2))} (uniform hyperprior)
Other options include specifying included or excluded nodes via
e.g., \code{s_u_zeroset = (1:265)[-c(1)],s_u_oneset = c(1))} to fit a single
big LCM (collapsing all nodes except the root node, the first node)}

\item{tol}{Convergence tolerance for the objective function.
Default is \code{1E-8}.}

\item{tol_hyper}{The convergence tolerance for the objective function between
between subsequent hyperparameter updates. Typically a more generous
tolerance than \code{tol}.
Default is \code{1E-4}.}

\item{max_iter}{Maximum number of iterations of the VI algorithm.
Default is 5000.}

\item{nrestarts}{Number of random re-starts of the VI algorithm. The result that
gives the highest value of the objective function will be returned.
It is recommended to choose \code{nrestarts > 1}.
The default is 3.}

\item{keep_restarts}{If \code{TRUE}, the results from all random restarts will be returned.
If \code{FALSE}, only the restart with the highest objective function is returned. '
Default is \code{TRUE}.}

\item{parallel}{If \code{TRUE}, the random restarts will be run in parallel.
It is recommended to first set the number of cores using \code{doParallel::registerDoParallel()}.
Otherwise, the default number of cores specified by the \code{doParallel} package will be used.
Default is \code{TRUE}.}

\item{log_restarts}{If \code{TRUE}, when \code{nrestarts > 1} progress of each random restart will be
logged to a text file in \code{log_dir}. If \code{FALSE} and \code{nrestarts > 1},
progress will not be shown.
If \code{nrestarts = 1}, progress will always be printed to the console.
Default is \code{FALSE}.}

\item{log_dir}{Directory for logging progress of random restarts.
Default is the working directory.}

\item{vi_params_init, hyperparams_init}{Named lists containing initial values for the
variational parameters and hyperparameters. Supplying good initial values can be challenging,
and \code{lotR()} provides a way to guess initial values based on transformations
of conditional logistic regression estimates of the effect sizes
for each individual leaf_ids (see \code{\link{initialize_tree_lcm}}).
The most common use for \code{vi_params_init} and \code{hyperparams_init} is to supply starting
values based on previous output from \code{lotR()};
see the \code{vignette('lotR')} for examples.
The user can provide initial values for all parameters or a subset.
When initial values for one or more parameters are not
supplied, the missing values will be filled in by \code{\link{initialize_tree_lcm}}.}

\item{random_init}{If \code{TRUE}, some random variability will be added to the initial values.
The default is \code{FALSE}, unless \code{nrestarts > 1}, in which case
\code{random_init} will be set to \code{TRUE} and a warning message will be printed.
The amount of variability is determined by \code{random_init_vals}.}

\item{random_init_vals}{If \code{random_init = TRUE},
this is a list containing the following parameters for randomly permuting
the initial values:
\describe{
\item{\code{tau_lims}}{a vector of length 2, where \code{tau_lims[1]} is between 0 and 1,
and \code{tau_lims[2] > 1}. The initial values for the hyperparameter \code{tau} will
be chosen uniformly at random in the range \code{(tau_init * tau_lims[1], tau_init * tau_lims[2])},
where \code{tau_init} is the initial value for \code{tau} either supplied in \code{hyperparams_init}
or guessed using \code{\link{initialize_tree_lcm}}.}
\item{\code{psi_sd_frac}}{a value between 0 and 1. The initial values for the auxillary parameters
\code{psi} will have a normal random variate added to them with standard deviation equal to
\code{psi_sd_frac} multiplied by the initial value for eta either supplied in \code{hyperparams_init} or guessed
using \code{\link{initialize_tree_lcm}}. Absolute values are then taken for any
values of \code{psi} that are \code{< 0}.}
\item{\code{phi_sd_frac}}{same as above}.
\item{\code{mu_gamma_sd_frac}}{a value between 0 and 1. The initial values for
\code{mu} will have a normal random variate added to them with standard deviation equal to
\code{mu_sd_frac} multiplied by the absolute value of the initial value for \code{mu_gamma_sd_frac} either supplied in
\code{vi_params_init} or guessed using \code{\link{initialize_tree_lcm}}.}
\item{\code{mu_alpha_sd_frac}}{same as above.}
\item{\code{u_sd_frac}}{a value between 0 and 1. The initial value for the node inclusion probabilities
will first be transformed to the log odds scale to obtain \code{u}. A normal random variate will be
added to \code{u} with standard deviation equal to u_sd_frac multiplied by the absolute value of the
initial value for \code{u} either supplied in \code{vi_params_init} or guessed using \code{moretrees_init_logistic()}.
\code{u} will then be transformed back to the probability scale.}
}}

\item{allow_continue}{logical, TRUE to save results so can continue running the VI
updates with the last iteration from the old results.}
}
\value{
a list also of class "lcm_tree"

\describe{
  res <- make_list(mod,mod_restarts,mytree,dsgn,prob_est,est_ad_hoc)
     class(res) <- c("lcm_tree","list")
   }
}
\description{
wrapper function for fitting and summaries
}
\examples{
vignette('lotR')

}
\concept{lcm_tree functions}
